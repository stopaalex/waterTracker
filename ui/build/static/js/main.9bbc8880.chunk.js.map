{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createDayPicker","state","people","length","console","log","Object","keys","days","map","day","idx","arr","dateSelected","highlight","key","onClick","selectData","className","setState","createMainDisplay","person","full","name","addWater","removeWater","date","newPeopleData","JSON","parse","stringify","forEach","fetch","serverEndpoint","method","body","headers","then","r","json","res","err","getWaterData","a","error","navigation","Date","getFullYear","getMonth","getDate","this","split","toString","newDayPeople","nav","dayPicker","mainDisplay","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9bbc8880.chunk.js","sourcesContent":["/*\n\nFront-end :::: app.js\n\n*/\n\nimport React from 'react';\nimport { Component } from 'react';\nimport { FaWater, FaChevronUp, FaChevronDown, FaCheck } from 'react-icons/fa';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      serverEndpoint: 'http://localhost:8000',\n      dateSelected: new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate(),\n      people: []\n      // end data\n    }\n  }\n\n  /** component mounting */\n  async componentDidMount() {\n    console.log('mounted');\n\n    // update date\n    let date = this.state.dateSelected.split('-')[1];\n    if (date < 10) { date = '0' + date.toString(); }\n    this.setState({\n      dateSelected: new Date().getFullYear() + '-' + date + '-' + new Date().getDate()\n    });\n\n    await this.getWaterData();\n\n    if (!this.state.people[0].days[this.state.dateSelected]) {\n      let newDayPeople = JSON.parse(JSON.stringify(this.state.people));\n      newDayPeople.forEach(person => {\n        person.days[this.state.dateSelected] = 0;\n      });\n\n      this.setState({\n        people: newDayPeople\n      })\n    }\n    // console.log(this.state.people[0].days[this.state.dateSelected])\n  }\n\n  createDayPicker = () => {\n    if (this.state.people.length > 0) {\n\n      console.log(this.state.people[0]);\n\n      let picker = Object.keys(this.state.people[0].days).map((day, idx, arr) => {\n\n        console.log(this.state.dateSelected);\n        console.log(day);\n\n        let highlight = 'not-selected';\n        if (this.state.dateSelected === day) {\n          highlight = 'selected'\n        }\n        // TODO thsi needs to be an intermediate builder intermediate \n        return (\n          <div key={idx} onClick={() => this.selectData(day)} className={highlight}>\n            {day}\n          </div>\n        )\n      });\n      return picker;\n    } else {\n      return <div>Nothing here yet</div>\n    }\n  }\n\n  selectData = (day) => {\n    // e.preventDefault();\n    this.setState({\n      dateSelected: day\n    });\n\n    console.log()\n  }\n\n  createMainDisplay = () => {\n    let html = this.state.people.map((person, idx, arr) => {\n      let full = person.days[this.state.dateSelected] >= 6 ? 'complete' : 'incomplete'\n      return (\n        <div key={idx}>\n          <div className=\"name\">\n            {person.name}\n          </div>\n          <div className={full}><FaCheck /></div>\n          <div className=\"display\">\n            <div className=\"add\" onClick={() => this.addWater(person.name, this.state.dateSelected)}>\n              <FaChevronUp />\n            </div>\n            <div className=\"amount\">\n              {person.days[this.state.dateSelected]} <span> / 6</span>\n            </div>\n            <div className=\"remove\" onClick={() => this.removeWater(person.name, this.state.dateSelected)}>\n              <FaChevronDown />\n            </div>\n          </div>\n        </div>\n      )\n    })\n    return html;\n  }\n\n  addWater = (name, date) => {\n    let newPeopleData = JSON.parse(JSON.stringify(this.state.people));\n    newPeopleData.forEach((person, idx, arr) => {\n      if (person.name === name) {\n        person.days[date]++\n      }\n    });\n    this.setState({\n      people: newPeopleData\n    })\n    // console.log(newPeopleData);\n\n    fetch(this.state.serverEndpoint + '/api/water/add', {\n      method: 'POST',\n      body: JSON.stringify(newPeopleData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(res => {\n      console.log(res);\n    }, err => {\n      console.log(err);\n    })\n  }\n  removeWater = (name, date) => {\n    let newPeopleData = JSON.parse(JSON.stringify(this.state.people));\n    newPeopleData.forEach((person, idx, arr) => {\n      if (person.name === name) {\n        person.days[date]--;\n      }\n    });\n    this.setState({\n      people: newPeopleData\n    })\n    // console.log(newPeopleData);\n\n    fetch(this.state.serverEndpoint + '/api/water/remove', {\n      method: 'POST',\n      body: JSON.stringify(newPeopleData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(res => {\n      console.log(res);\n    }, err => {\n      console.log(err);\n    })\n\n  }\n\n  getWaterData = async () => {\n    return fetch(this.state.serverEndpoint + '/api/water/get', { method: 'GET' }).then(r => r.json()).then(res => {\n      console.log(res);\n      this.setState({\n        people: res.people\n      })\n      return res;\n    }, err => {\n      console.error(err);\n    });\n  }\n\n  /** Navigation / Header */\n  navigation = () => {\n    return (\n      <div className=\"navigation\">\n        <FaWater /> Water Tracker\n      </div>\n    )\n  }\n\n  /** rener function */\n  render() {\n\n    let nav = this.navigation();\n    let dayPicker = this.createDayPicker();\n    let mainDisplay = this.createMainDisplay();\n\n    return (\n      <div className=\"app-wrapper\">\n        {nav}\n        <div className=\"day-picker\">\n          {dayPicker}\n        </div>\n        <div className=\"main-display\">\n          {mainDisplay}\n        </div>\n        {/* {peeps} */}\n      </div>\n    )\n  }\n\n  // --- END APP COMPONENT --- //\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}